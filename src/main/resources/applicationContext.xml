<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--  Spring的配置文件，主要配置和业务逻辑相关的  -->
    <!--  数据源，事务控制,xxx  -->

    <!--  配置创建Ioc容器时要扫描的包  -->
    <context:component-scan base-package="com.sxt">
        <!--    配置哪些包不扫码,Spring只管理Dao和Service，Controller由SpringMVC来管理    -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--  引入外部配置文件  jdbcConfig.properties  -->
    <context:property-placeholder location="classpath:jdbcConfig.properties"></context:property-placeholder>


    <!--  配置数据源  -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass" value="${jdbc.driver}"></property>
        <property name="jdbcUrl" value="${jdbc.url}"></property>
        <property name="user" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--  配置和MyBatis的整合，会创建SqlSessionFactory工厂来创建SqlSession对象  -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--    指定MyBatis全局配置文件的位置    -->
        <property name="configLocation" value="classpath:SqlSessionConfig.xml"></property>
        <!--    注入数据源    -->
        <property name="dataSource" ref="dataSource"></property>
        <!--    指定MyBatis的mapper文件的位置    -->
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>
    </bean>

    <!--  配置扫描器，将MyBatis接口的实现类加入到Ioc的容器中  -->
    <bean id="mapperScanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--    指定Dao接口的包，扫描所有Dao接口的实现，加入到Ioc容器中    -->
        <property name="basePackage" value="com.sxt.Dao"></property>
    </bean>

    <!--  事务控制的配置  -->
    <!--  配置事务管理器  -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--      注入数据源      -->
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--  开启基于的事务，使用xml配置形式的事务(必要主要的都是使用配置式)
      配置事务增强，事务如何切入
      -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--    配置要对哪些方法采用事务，哪些方法不采用事务    -->
        <tx:attributes>
            <!--      所有方法都使用事务      -->
            <tx:method name="*" read-only="false" propagation="REQUIRED"></tx:method>
            <!--     get*是以get打头的方法，此配置等级高些，作为查询方法，不需要事务，只读       -->
            <tx:method name="get*" read-only="true" propagation="SUPPORTS"></tx:method>
        </tx:attributes>
    </tx:advice>

    <!--  配置AOP  -->
    <aop:config>
        <!--    配置切入点表达式    -->
        <aop:pointcut id="txPoint" expression="execution(* com.sxt.Service.impl.*.*(..))"/>
        <!--    配置与事务通知的关联    -->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
    </aop:config>

    <!--  Spring配置文件的核心点(数据源，与MyBatis的整合，事务控制)  -->


    <!--  配置一个可以执行批量的sqlSession
      SqlSessionTemplate是MyBatis和Spring整合时使用的
      -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <!--    mybatis提供三种sql执行器，分别是SIMPLE、REUSE、BATCH。
            BATCH执行器会重用预处理语句，并执行批量更新。
            详细请访问：https://blog.csdn.net/fengshuiyue/article/details/89222654
            -->
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>



</beans>